type User = 
 record {
   alienId: opt TokenIndex;
   alienLevel: nat;
   email: text;
   numberOfPoints: nat;
   numberOfSubmission: nat;
   prizes: vec Prize;
   registrationTime: Time__1;
   verificationTime: opt Time__1;
   wallet: principal;
 };
type UpdateCallsAggregatedData = vec nat64;
type TransferResult = 
 vec record {
       principal;
       principal;
       DistributionStatus;
     };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferData = 
 vec record {
       principal;
       principal;
       nat;
     };
type TokensDataVolt = 
 vec record {
       nat32;
       nat32;
     };
type TokensData = 
 vec record {
       nat32;
       text;
     };
type TokenIndex = nat32;
type TokenDetails = 
 record {
   amount: nat;
   decimals: nat;
   fee: nat;
   ledgerId: principal;
   symbol: text;
 };
type Timestamp = nat64;
type TimerId = nat;
type Time__1 = int;
type Time = int;
type Stats = 
 record {
   numberAliens: vec record {
                       nat;
                       nat;
                     };
   numberBlacklisted: nat;
   numberConf: nat;
   numberMeetups: vec record {
                        text;
                        nat;
                      };
   numberOfSubmissions: nat;
   numberUsers: nat;
   numberVerifiedUsers: nat;
 };
type SpecialCode = 
 record {
   code: text;
   maxUsage: nat;
   numberOfPoints: nat;
   usageCount: nat;
 };
type Result__1 = 
 variant {
   err: text;
   ok;
 };
type Result_3 = 
 variant {
   err: text;
   ok: TransferData;
 };
type Result_2 = 
 variant {
   err: text;
   ok: User;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RaffleOutput = 
 vec record {
       principal;
       Prize__1;
     };
type RaffleInput = 
 record {
   airdropId: nat;
   amount: nat;
   decimals: nat;
   distributionPrizes: record {
                         float64;
                         float64;
                         float64;
                       };
   distributionTiers: record {
                        float64;
                        float64;
                        float64;
                      };
   fee: nat;
   ledgerId: principal;
   qualified: vec principal;
   symbol: text;
 };
type RaffleData = 
 record {
   input: RaffleInput;
   output: RaffleOutput;
 };
type Prize__1 = 
 record {
   airdropId: nat;
   amount: nat;
   decimals: nat;
   distributionStatus: DistributionStatus__1;
   ledgerId: principal;
   symbol: text;
 };
type Prize = 
 record {
   airdropId: nat;
   amount: nat;
   decimals: nat;
   distributionStatus: DistributionStatus;
   ledgerId: principal;
   symbol: text;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type Email = 
 record {
   code: text;
   email: text;
   id: nat;
 };
type DistributionStatus__1 = 
 variant {
   Distributed: nat;
   Failed: TransferError;
   NotDistributed;
 };
type DistributionStatus = 
 variant {
   Distributed: nat;
   Failed: TransferError;
   NotDistributed;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type Code__1 = text;
type Code = text;
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type AirdropTiming = 
 record {
   endTime: opt Time;
   maxDuration: Time;
   startTime: opt Time;
 };
type AirdropStatus = 
 variant {
   EntryClosed;
   Open;
   Pending;
   PrizesAssigned;
   PrizesDelivered;
   RaffleCompleted;
 };
type AirdropMetadata = 
 record {
   chat: text;
   description: text;
   id: nat;
   learnMore: text;
   name: text;
   twitter: text;
 };
type AirdropManager = 
 service {
   addAdmin: (text) -> (Result);
   allocatePrizes: () -> ();
   blacklistAdmin: (principal) -> ();
   collectCanisterMetrics: () -> ();
   exportDataAirdrop: () -> (vec record {
                                   text;
                                   principal;
                                   principal;
                                   nat;
                                 });
   getAdmins: () -> (vec principal) query;
   getAirdrop: (AirdropId) -> (opt Airdrop) query;
   getAlienId: (principal) -> (opt nat32);
   getAllAirdropsDashboard: () -> (vec AirdropDashboard) query;
   getBlacklist: () -> (vec principal);
   getCanisterLog: (opt CanisterLogRequest) ->
    (opt CanisterLogResponse) query;
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   getEmails: () -> (vec Email) query;
   getNumberOfPoints: (principal) -> (nat);
   getQualifiedAirdrops: () -> (vec nat) query;
   getRunningJobsAdmin: () -> (vec TimerId) query;
   getStats: () -> (Stats);
   getTransfersDataAirdrop: (nat) -> (Result_3) query;
   getUser: () -> (Result_2) query;
   getUserAdmin: (principal) -> (Result_2) query;
   isMissingData: () -> (vec nat32);
   loadAirdropAdmin: (AirdropInit) -> (Result);
   loadSpecialCodesAdmin: (vec SpecialCode) -> (Result);
   loadTokensData: (TokensData) -> ();
   loadTokensDataVolt: (TokensDataVolt) -> ();
   notifyDistribution: (nat, TransferResult) -> ();
   registerUser: (text, principal, text) -> (Result);
   removeAdmin: (principal) -> (Result__1);
   removeCronJobsAdmin: () -> (Result);
   removeDuplicatePrizes: () -> ();
   removeJobAdmin: (nat) -> (Result);
   reportSentEmails: (vec nat) -> (Result);
   setCronJobsAdmin: () -> (Result);
   setDockerAdmin: (principal) -> ();
   setMaxMessagesCount: (nat) -> ();
   submitCode: (text, text) -> (Result_1);
   transferAlien: (AccountIdentifier) -> (Result);
   verifyUser: (Code) -> (Result);
   whitelistAdmin: (principal) -> ();
 };
type AirdropLimits = record {maxParticipants: nat;};
type AirdropInit = 
 record {
   code: Code__1;
   distribution: AirdropDistribution;
   limits: AirdropLimits;
   metadata: AirdropMetadata;
   timing: AirdropTiming;
   tokenDetails: TokenDetails;
 };
type AirdropId = nat;
type AirdropDistribution = 
 record {
   distributionPrizes: record {
                         float64;
                         float64;
                         float64;
                       };
   distributionTiers: record {
                        float64;
                        float64;
                        float64;
                      };
 };
type AirdropDashboard = 
 record {
   limits: AirdropLimits;
   metadata: AirdropMetadata;
   numberOfQualified: nat;
   status: AirdropStatus;
   tokenDetails: TokenDetails;
 };
type Airdrop = 
 record {
   code: Code__1;
   distribution: AirdropDistribution;
   limits: AirdropLimits;
   metadata: AirdropMetadata;
   qualified: vec principal;
   raffle: opt RaffleData;
   status: AirdropStatus;
   timing: AirdropTiming;
   tokenDetails: TokenDetails;
 };
type AccountIdentifier = text;
service : () -> AirdropManager
